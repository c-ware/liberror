























































































 






.TH "LIBERROR" "SECTION_HERE" "May 07, 2022" \
" " "CATEGORY_NAME_HERE"
.SH NAME
liberror - a collection of macro error handlers


.SH SYNOPSIS
.B "#include ""liberror.h"""
.br

.BI "#define liberror_is_null(" \
"function_name" \
", " \
"argument" \
")
.br"
.BI "#define liberror_is_negative(" \
"function_name" \
", " \
"argument" \
")
.br"
.BI "#define liberror_is_positive(" \
"function_name" \
", " \
"argument" \
")
.br"
.BI "#define liberror_in_range(" \
"function_name" \
", " \
"argument" \
", " \
"start" \
", " \
"end" \
")
.br"
.BI "#define liberror_buffer_is_full(" \
"function_name" \
", " \
"argument" \
", " \
"needed_size" \
", " \
"length" \
")
.br"
.BI "#define liberror_is_number(" \
"function_name" \
", " \
"argument" \
", " \
"format" \
", " \
"value" \
")
.br"
.BI "#define liberror_failure(" \
"function_name" \
", " \
"function" \
")
.br"
.BI "#define liberror_unhandled(" \
"function_name" \
")
.br"


.SH DESCRIPTION
A big problem people often have with C is its lack of safety. This is understandable.
C is definitely not a very safe language. To achieve behavior like this,
programmers must resort to doing things like error checking at runtime, as
opposed to using C's type system, since it is quite primitive. 

The purpose of this library is to make error checking at runtime a lot simpler
by introducing macros which reduce the boilerplate required to do this kind of
logic, since it can get quite repetitive. This library allows for enforcing
runtime constraints on the range a number can be, a generic
.BR "error" "(3)" ""
error conditions, a 'should not get here' macro, and more.

When the condition of one of the macros is met, the macro will display an
error to the stderr, and
.BR "abort" "(3)" ""
the program. What follows is a list of each macro, and a brief description of
it.

.TS
tab(;);
lb l
_ _
lb l.
Macro;Description;
liberror_is_null;check for a NULL argumment;
liberror_is_negative;check for a negative number;
liberror_is_positive;check for a positive number;
liberror_in_range;verify an argument is in a range of numbers;
liberror_buffer_is_full;determine if a buffer was truncated when written to;
liberror_is_number;determine if an argument is a certain number;
liberror_failure;produce an error for a failed errno;
liberror_unhandled;report an unhandled error;
.TE



.SH SEE ALSO
.BR "cware" "(cware)"

